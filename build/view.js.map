{"version":3,"file":"view.js","mappings":"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ACP,MAAM;MAAEmC;IAAS,CAAC,GAAG,IAAIC,GAAG,CAACpC,GAAG,CAAC;IACjC,OAAOmC,QAAQ;EACjB;AACF;;;;;;;;;;ACtEa;;AAEb,QAAQ,mBAAO,CAAC,4BAAW;AAC3B,IAAI,KAAqC,EAAE,EAG1C,CAAC;AACF;AACA,EAAE,kBAAkB;AACpB;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,EAAE,mBAAmB;AACrB;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;;;;;;;;;;ACxBA;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;;ACA+B;AACa;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,4CAA4C;AAC5C,4CAA4C,+CAAQ;AACpD,gCAAgC,+CAAQ;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,+BAA+B;AACzC;AACA,IAAI,gDAAS;AACb;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,IAAI,gDAAS;AACb;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,KAAK;AACL,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gGAAgG,QAAQ,YAAY;AACpH;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS;AACT,KAAK;AACL;;AAEA,QAAQ,uBAAuB,gBAAgB,gDAAmB;AAClE;AACA,UAAU,oBAAoB;AAC9B,yBAAyB,gDAAmB;AAC5C;AACA,KAAK;AACL;AACA;AACA,UAAU,UAAU;AACpB,yBAAyB,gDAAmB;AAC5C;AACA,KAAK;AACL;;AAEA;AACA,wCAAwC,4CAAe;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,+BAA+B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,+BAA+B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,aAAa;AACb;AACA;AACA,oBAAoB,UAAU;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,UAAU;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,oJAAoJ;AACtK,oBAAoB,+BAA+B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,kBAAkB,WAAW;AAC7B,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,kBAAkB;AAClB;AACA,kBAAkB;AAClB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA,mCAAmC,4CAAe;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,sDAAsD;AACtE,6BAA6B,gDAAmB;AAChD;AACA,qCAAqC,gDAAmB,4CAA4C;AACpG;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;;AAEA,gCAAgC,4CAAe;AAC/C;AACA;AACA;AACA;AACA,cAAc,6CAA6C;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wBAAwB;AAC5C;AACA,mFAAmF,aAAa;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,gBAAgB,+BAA+B;AAC/C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,6BAA6B,gDAAmB;AAChD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,4CAAe;AACzC;AACA,gBAAgB,yGAAyG;AACzH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B;AACA,2BAA2B,qBAAqB;AAChD,wBAAwB,gDAAgD;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,oCAAoC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,gDAAmB;AACpD;AACA;AACA,aAAa,gBAAgB,gDAAmB;AAChD;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV,iCAAiC,gDAAmB;AACpD;AACA;AACA,aAAa;AACb,sBAAsB,eAAe;AACrC;AACA,aAAa;AACb,sBAAsB,eAAe;AACrC;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,4CAAe;AAC1D,yCAAyC,4CAAe;AACxD;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,oBAAoB,qBAAqB;AACzC;AACA,wBAAwB,8FAA8F;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,sBAAsB,WAAW;AACjC;AACA,aAAa;AACb;AACA,wBAAwB,yBAAyB;AACjD,wBAAwB,qBAAqB;AAC7C;AACA;AACA,4BAA4B,wBAAwB;AACpD;AACA;AACA,2FAA2F,aAAa;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,oBAAoB,qEAAqE;AACzF;AACA;AACA;AACA;AACA;AACA,iCAAiC,gDAAmB;AACpD;AACA;AACA;AACA,aAAa,2FAA2F,gDAAmB,CAAC,2CAAc,sBAAsB,gDAAmB;AACnL;AACA;AACA;AACA,aAAa,iBAAiB,gDAAmB;AACjD;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,qGAAqG,gDAAmB,CAAC,2CAAc;AACvI,sBAAsB,yBAAyB;AAC/C;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,sBAAsB,yBAAyB;AAC/C,qCAAqC,gDAAmB;AACxD;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,iCAAiC,gDAAmB;AACpD;AACA,aAAa;AACb;AACA;AACA;;AAEA,uBAAuB,4CAAe;AACtC;AACA,gBAAgB,uFAAuF;AACvG,6BAA6B,gDAAmB;AAChD;AACA,SAAS,qFAAqF,gDAAmB,8BAA8B;AAC/I;AACA,SAAS,mGAAmG,gDAAmB;AAC/H;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4CAA4C;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sEAAsE;;AAEvE;;AAE6E;AAC7E;;;;;;;UCnwBA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;ACN8C;AACA;AACL;AACQ;AACE;AACN;AAG7C,IAAI1B,KAAK,GAAGuB,QAAQ,CAACC,aAAa,CAAC,eAAe,CAAC;AACnD,IAAIpE,OAAO,GAAG2C,2DAAW,CAACC,KAAK,CAAC;AAEhC,SAAS6B,eAAeA,CAAA,EAAG;EACzB,OAAOjE,oDAAA,CAAAc,2CAAA,QACLd,oDAAA,aAAI,kBAAoB,CAAC,EACzBA,oDAAA,CAACT,wDAAQ;IAACC,OAAO,EAAEA;EAAQ,CAAE,CAAC,EAC9BQ,oDAAA,CAAC0B,8DAAU;IAAClC,OAAO,EAAEA;EAAQ,CAAE,CAAC,EAChCQ,oDAAA,CAACqB,+DAAW;IAAC7B,OAAO,EAAEA;EAAQ,CAAE,CAAC,EACjCQ,oDAAA,CAACK,4DAAQ;IAACb,OAAO,EAAEA;EAAQ,CAAE,CAC7B,CAAC;AACL;AAEA,MAAM0E,OAAO,GAAGP,QAAQ,CAACQ,cAAc,CAAC,kBAAkB,CAAC;AAC3D,MAAMC,IAAI,GAAGJ,4DAAU,CAACE,OAAO,CAAC;AAChCE,IAAI,CAACC,MAAM,CAACrE,oDAAA,CAACiE,eAAe,MAAC,CAAC,CAAC,C","sources":["webpack://parkrun/./src/charts/PieChart/index.js","webpack://parkrun/./src/components/Alphabet/index.js","webpack://parkrun/./src/components/MyCountries/index.js","webpack://parkrun/./src/components/MyParkRuns/index.js","webpack://parkrun/./src/utils/countries.js","webpack://parkrun/./src/utils/events.js","webpack://parkrun/./src/utils/results.js","webpack://parkrun/./node_modules/react-dom/client.js","webpack://parkrun/external window \"React\"","webpack://parkrun/external window \"ReactDOM\"","webpack://parkrun/./node_modules/react-google-charts/dist/index.js","webpack://parkrun/webpack/bootstrap","webpack://parkrun/webpack/runtime/compat get default export","webpack://parkrun/webpack/runtime/define property getters","webpack://parkrun/webpack/runtime/hasOwnProperty shorthand","webpack://parkrun/webpack/runtime/make namespace object","webpack://parkrun/./src/view.js"],"sourcesContent":["import { Chart } from \"react-google-charts\";\nimport { getUniqueEventsAndCount } from \"../../utils/results\";\n\nexport default function PieChart({ results }) {\n    const uniqueEventsAndCount = getUniqueEventsAndCount(results);\n    const options = {\n        title: \"My most common Parkruns\",\n        sliceVisibilityThreshold: 0.02\n    };\n\n    let data = [['Event', 'Count']];\n    for (let event in uniqueEventsAndCount) {\n        data.push([event, uniqueEventsAndCount[event]]);\n    }\n\n    return <Chart\n        chartType=\"PieChart\"\n        data={data}\n        width=\"100%\"\n        height=\"400px\"\n        options={options}\n        />;\n}","import { getUniqueEventsAndCount } from \"../../utils/results\";\nimport { parkrunWithThisLetter } from \"../../utils/events\";\n\nexport default function Alphabet({ results }) {\n    const uniqueEventsAndCount = getUniqueEventsAndCount(results);\n    const alphabet = Array.from({ length: 26 }, (_, i) => String.fromCharCode(65 + i));\n\n    return <>\n        <h2>I have completed the following events in the unoffical Parkrun alphabet challenge</h2>\n        <ul>\n            {alphabet.map(letter => (\n                <li key={letter}> <span className={\"parkrun-letter parkrun-letter--none\" + parkrunWithThisLetter( letter, uniqueEventsAndCount )}> {letter} </span> - { parkrunWithThisLetter( letter, uniqueEventsAndCount )}</li>\n            ))}\n        </ul>\n    </>;\n}","import { getUniqueCountryEventsAndCount } from \"../../utils/results\";\nimport { getCountryName } from \"../../utils/countries\";\n\nexport default function MyCountries({ results }) {\n    const uniqueEventsAndCount = getUniqueCountryEventsAndCount(results);\n    const uniqueEvents = Object.keys(uniqueEventsAndCount).length;\n\n    return <>\n        <h2>I have run Parkrun in { uniqueEvents } different Parkrun countries</h2>\n        <ol>\n            {Object.keys(uniqueEventsAndCount).map(event => {\n                return <li key={event}>{ getCountryName(event) } <span class=\"fi fi-gr\"></span></li>;\n            })}\n        </ol>\n    </>;\n}","import { getUniqueEventsAndCount } from \"../../utils/results\";\n\nexport default function MyParkRuns({ results }) {\n    const uniqueEventsAndCount = getUniqueEventsAndCount(results);\n    const uniqueEvents = Object.keys(uniqueEventsAndCount).length;\n\n    return <>\n        <h2>I have run in { uniqueEvents } unique Parkrun events</h2>\n        <ol>\n            {Object.keys(uniqueEventsAndCount).map(event => {\n                return <li key={event}>{event}</li>;\n            })}\n        </ol>\n    </>;\n}","\nexport function getCountryName(url) {\n    const countries = {\n        'www.parkrun.ie': 'Ireland',\n        'www.parkrun.com.de': 'Germany',\n        'www.parkrun.org.uk': 'United Kingdom',\n        'www.parkrun.pl': 'Poland',\n        'www.parkrun.co.nl': 'Netherlands',\n        'www.parkrun.co.at': 'Austria',\n    };\n\n    return countries[url];\n}","\nexport function parkrunWithThisLetter( letter, uniqueEventsAndCount ) {\n    \n    console.log(uniqueEventsAndCount);\n    const events = Object.keys(uniqueEventsAndCount).filter(event => event.startsWith(letter));\n    \n    if (events.length === 0) {\n        return '';\n    }\n\n    return events.join(', ');\n}","export function tableToJson(table) { \n  var rows = table.rows;\n  var propCells = rows[0].cells;\n  var propNames = [];\n  var results = [];\n  var obj, row, cells;\n  var countryUrl = '';\n\n  // Use the first row for the property names\n  // Could use a header section but result is the same if\n  // there is only one header row\n  for (var i=0, iLen=propCells.length; i<iLen; i++) {\n    propNames.push(propCells[i].textContent || propCells[i].innerText);\n  }\n  propNames.push('Country');\n\n  // Use the rows for data\n  // Could use tbody rows here to exclude header & footer\n  // but starting from 1 gives required result\n  for (var j=1, jLen=rows.length; j<jLen; j++) {\n    cells = rows[j].cells;\n    obj = {};\n\n    for (var k=0; k<iLen; k++) {\n      obj[propNames[k]] = cells[k].textContent || cells[k].innerText;\n      if (cells[k].innerHTML.includes('<a href')) {\n        countryUrl = extractCountryUrl(cells[k].innerHTML);\n      }\n    }\n    obj[propNames[k]] = countryUrl;\n    results.push(obj)\n  }\n  return results;\n}\n\n// Get unique events from the results and count the number of times they appear\nexport function getUniqueEventsAndCount(results) {\n  let uniqueEvents = {};\n  results.forEach(result => {\n    if (uniqueEvents[result.Event]) {\n      uniqueEvents[result.Event]++;\n    } else {\n      uniqueEvents[result.Event] = 1;\n    }\n  });\n  return uniqueEvents;\n}\n\nexport function getUniqueCountryEventsAndCount(results) {\n  let uniqueEvents = {};\n  results.forEach(result => {\n    if (uniqueEvents[result.Country]) {\n      uniqueEvents[result.Country]++;\n    } else {\n      uniqueEvents[result.Country] = 1;\n    }\n  });\n  return uniqueEvents;\n}\n\nfunction extractCountryUrl(htmlCode) {\n  const tempElement = document.createElement('div');\n  tempElement.innerHTML = htmlCode;\n\n  // Extract the URL from the <a> tag\n  const url = tempElement.querySelector('a').href;\n  if (url) {\n    const { hostname } = new URL(url);\n    return hostname;\n  }\n}","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","module.exports = window[\"React\"];","module.exports = window[\"ReactDOM\"];","import * as React from 'react';\nimport { useEffect, useState } from 'react';\n\n/**\n * Hook to load external script.\n * @param src - Source url to load.\n * @param onLoad - Success callback.\n * @param onError - Error callback.\n */ function useLoadScript(src, onLoad, onError) {\n    useEffect(()=>{\n        if (!document) {\n            return;\n        }\n        // Find script tag with same src in DOM.\n        const foundScript = document.querySelector('script[src=\"'.concat(src, '\"]'));\n        // Call onLoad if script marked as loaded.\n        if (foundScript === null || foundScript === void 0 ? void 0 : foundScript.dataset.loaded) {\n            onLoad === null || onLoad === void 0 ? void 0 : onLoad();\n            return;\n        }\n        // Create or get existed tag.\n        const script = foundScript || document.createElement(\"script\");\n        // Set src if no script was found.\n        if (!foundScript) {\n            script.src = src;\n        }\n        // Mark script as loaded on load event.\n        const onLoadWithMarker = ()=>{\n            script.dataset.loaded = \"1\";\n            onLoad === null || onLoad === void 0 ? void 0 : onLoad();\n        };\n        script.addEventListener(\"load\", onLoadWithMarker);\n        if (onError) {\n            script.addEventListener(\"error\", onError);\n        }\n        // Add to DOM if not yet added.\n        if (!foundScript) {\n            document.head.append(script);\n        }\n        return ()=>{\n            script.removeEventListener(\"load\", onLoadWithMarker);\n            if (onError) {\n                script.removeEventListener(\"error\", onError);\n            }\n        };\n    }, []);\n}\n\n/**\n * Hook to load Google Charts JS API.\n * @param params - Load parameters.\n * @param [params.chartVersion] - Chart version to load.\n * @param [params.chartPackages] - Packages to load.\n * @param [params.chartLanguage] - Languages to load.\n * @param [params.mapsApiKey] - Google Maps api key.\n * @returns\n */ function useLoadGoogleCharts(param) {\n    let { chartVersion =\"current\" , chartPackages =[\n        \"corechart\",\n        \"controls\"\n    ] , chartLanguage =\"en\" , mapsApiKey  } = param;\n    const [googleCharts, setGoogleCharts] = useState(null);\n    const [failed, setFailed] = useState(false);\n    useLoadScript(\"https://www.gstatic.com/charts/loader.js\", ()=>{\n        // @ts-expect-error Getting object from global namespace.\n        const google = window === null || window === void 0 ? void 0 : window.google;\n        if (!google) {\n            return;\n        }\n        google.charts.load(chartVersion, {\n            packages: chartPackages,\n            language: chartLanguage,\n            mapsApiKey\n        });\n        google.charts.setOnLoadCallback(()=>{\n            setGoogleCharts(google);\n        });\n    }, ()=>{\n        setFailed(true);\n    });\n    return [\n        googleCharts,\n        failed\n    ];\n}\n/**\n * Wrapper around useLoadGoogleCharts to use in legacy components.\n */ function LoadGoogleCharts(param) {\n    let { onLoad , onError , ...params } = param;\n    const [googleCharts, failed] = useLoadGoogleCharts(params);\n    useEffect(()=>{\n        if (googleCharts && onLoad) {\n            onLoad(googleCharts);\n        }\n    }, [\n        googleCharts\n    ]);\n    useEffect(()=>{\n        if (failed && onError) {\n            onError();\n        }\n    }, [\n        failed\n    ]);\n    return null;\n}\n\nconst chartDefaultProps = {\n    // <DEPRECATED_PROPS>\n    legend_toggle: false,\n    // </DEPRECATED_PROPS>\n    options: {},\n    legendToggle: false,\n    getChartWrapper: ()=>{},\n    spreadSheetQueryParameters: {\n        headers: 1,\n        gid: 1\n    },\n    rootProps: {},\n    chartWrapperParams: {}\n};\n\nlet uniqueID = 0;\nconst generateUniqueID = ()=>{\n    uniqueID += 1;\n    return \"reactgooglegraph-\".concat(uniqueID);\n};\n\nconst DEFAULT_CHART_COLORS = [\n    \"#3366CC\",\n    \"#DC3912\",\n    \"#FF9900\",\n    \"#109618\",\n    \"#990099\",\n    \"#3B3EAC\",\n    \"#0099C6\",\n    \"#DD4477\",\n    \"#66AA00\",\n    \"#B82E2E\",\n    \"#316395\",\n    \"#994499\",\n    \"#22AA99\",\n    \"#AAAA11\",\n    \"#6633CC\",\n    \"#E67300\",\n    \"#8B0707\",\n    \"#329262\",\n    \"#5574A6\",\n    \"#3B3EAC\"\n];\n\nconst loadDataTableFromSpreadSheet = async function(googleViz, spreadSheetUrl) {\n    let urlParams = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    return new Promise((resolve, reject)=>{\n        const headers = \"\".concat(urlParams.headers ? \"headers=\".concat(urlParams.headers) : \"headers=0\");\n        const queryString = \"\".concat(urlParams.query ? \"&tq=\".concat(encodeURIComponent(urlParams.query)) : \"\");\n        const gid = \"\".concat(urlParams.gid ? \"&gid=\".concat(urlParams.gid) : \"\");\n        const sheet = \"\".concat(urlParams.sheet ? \"&sheet=\".concat(urlParams.sheet) : \"\");\n        const access_token = \"\".concat(urlParams.access_token ? \"&access_token=\".concat(urlParams.access_token) : \"\");\n        const urlQueryString = \"\".concat(headers).concat(gid).concat(sheet).concat(queryString).concat(access_token);\n        const urlToSpreadSheet = \"\".concat(spreadSheetUrl, \"/gviz/tq?\").concat(urlQueryString); //&tq=${queryString}`;\n        const query = new googleViz.visualization.Query(urlToSpreadSheet);\n        query.send((response)=>{\n            if (response.isError()) {\n                reject(\"Error in query:  \".concat(response.getMessage(), \" \").concat(response.getDetailedMessage()));\n            } else {\n                resolve(response.getDataTable());\n            }\n        });\n    });\n};\n\nconst { Provider , Consumer  } = /*#__PURE__*/ React.createContext(chartDefaultProps);\nconst ContextProvider = (param)=>{\n    let { children , value  } = param;\n    return /*#__PURE__*/ React.createElement(Provider, {\n        value: value\n    }, children);\n};\nconst ContextConsumer = (param)=>{\n    let { render  } = param;\n    return /*#__PURE__*/ React.createElement(Consumer, null, (context)=>{\n        return render(context);\n    });\n};\n\nconst GRAY_COLOR = \"#CCCCCC\";\nclass GoogleChartDataTableInner extends React.Component {\n    componentDidMount() {\n        this.draw(this.props);\n        window.addEventListener(\"resize\", this.onResize);\n        if (this.props.legend_toggle || this.props.legendToggle) {\n            this.listenToLegendToggle();\n        }\n    }\n    componentWillUnmount() {\n        const { google , googleChartWrapper  } = this.props;\n        window.removeEventListener(\"resize\", this.onResize);\n        google.visualization.events.removeAllListeners(googleChartWrapper);\n        if (googleChartWrapper.getChartType() === \"Timeline\") {\n            googleChartWrapper.getChart() && googleChartWrapper.getChart().clearChart();\n        }\n    }\n    componentDidUpdate() {\n        this.draw(this.props);\n    }\n    render() {\n        return null;\n    }\n    constructor(...args){\n        super(...args);\n        this.state = {\n            hiddenColumns: []\n        };\n        this.listenToLegendToggle = ()=>{\n            const { google , googleChartWrapper  } = this.props;\n            google.visualization.events.addListener(googleChartWrapper, \"select\", ()=>{\n                const chart = googleChartWrapper.getChart();\n                const selection = chart.getSelection();\n                const dataTable = googleChartWrapper.getDataTable();\n                if (selection.length === 0 || // We want to listen to when a whole row is selected. This is the case only when row === null\n                selection[0].row || !dataTable) {\n                    return;\n                }\n                const columnIndex = selection[0].column;\n                const columnID = this.getColumnID(dataTable, columnIndex);\n                if (this.state.hiddenColumns.includes(columnID)) {\n                    this.setState((state)=>({\n                            ...state,\n                            hiddenColumns: [\n                                ...state.hiddenColumns.filter((colID)=>colID !== columnID), \n                            ]\n                        }));\n                } else {\n                    this.setState((state)=>({\n                            ...state,\n                            hiddenColumns: [\n                                ...state.hiddenColumns,\n                                columnID\n                            ]\n                        }));\n                }\n            });\n        };\n        this.applyFormatters = (dataTable, formatters)=>{\n            const { google  } = this.props;\n            for (let formatter of formatters){\n                switch(formatter.type){\n                    case \"ArrowFormat\":\n                        {\n                            const vizFormatter = new google.visualization.ArrowFormat(formatter.options);\n                            vizFormatter.format(dataTable, formatter.column);\n                            break;\n                        }\n                    case \"BarFormat\":\n                        {\n                            const vizFormatter = new google.visualization.BarFormat(formatter.options);\n                            vizFormatter.format(dataTable, formatter.column);\n                            break;\n                        }\n                    case \"ColorFormat\":\n                        {\n                            const vizFormatter = new google.visualization.ColorFormat(formatter.options);\n                            const { ranges  } = formatter;\n                            for (let range of ranges){\n                                vizFormatter.addRange(...range);\n                            }\n                            vizFormatter.format(dataTable, formatter.column);\n                            break;\n                        }\n                    case \"DateFormat\":\n                        {\n                            const vizFormatter = new google.visualization.DateFormat(formatter.options);\n                            vizFormatter.format(dataTable, formatter.column);\n                            break;\n                        }\n                    case \"NumberFormat\":\n                        {\n                            const vizFormatter = new google.visualization.NumberFormat(formatter.options);\n                            vizFormatter.format(dataTable, formatter.column);\n                            break;\n                        }\n                    case \"PatternFormat\":\n                        {\n                            const vizFormatter = new google.visualization.PatternFormat(formatter.options);\n                            vizFormatter.format(dataTable, formatter.column);\n                            break;\n                        }\n                }\n            }\n        };\n        this.getColumnID = (dataTable, columnIndex)=>{\n            return dataTable.getColumnId(columnIndex) || dataTable.getColumnLabel(columnIndex);\n        };\n        this.draw = async (param)=>{\n            let { data , diffdata , rows , columns , options , legend_toggle , legendToggle , chartType , formatters , spreadSheetUrl , spreadSheetQueryParameters  } = param;\n            const { google , googleChartWrapper  } = this.props;\n            let dataTable;\n            let chartDiff = null;\n            if (diffdata) {\n                const oldData = google.visualization.arrayToDataTable(diffdata.old);\n                const newData = google.visualization.arrayToDataTable(diffdata.new);\n                chartDiff = google.visualization[chartType].prototype.computeDiff(oldData, newData);\n            }\n            if (data !== null) {\n                if (Array.isArray(data)) {\n                    dataTable = google.visualization.arrayToDataTable(data);\n                } else {\n                    dataTable = new google.visualization.DataTable(data);\n                }\n            } else if (rows && columns) {\n                dataTable = google.visualization.arrayToDataTable([\n                    columns,\n                    ...rows\n                ]);\n            } else if (spreadSheetUrl) {\n                dataTable = await loadDataTableFromSpreadSheet(google, spreadSheetUrl, spreadSheetQueryParameters);\n            } else {\n                dataTable = google.visualization.arrayToDataTable([]);\n            }\n            const columnCount = dataTable.getNumberOfColumns();\n            for(let i = 0; i < columnCount; i += 1){\n                const columnID = this.getColumnID(dataTable, i);\n                if (this.state.hiddenColumns.includes(columnID)) {\n                    const previousColumnLabel = dataTable.getColumnLabel(i);\n                    const previousColumnID = dataTable.getColumnId(i);\n                    const previousColumnType = dataTable.getColumnType(i);\n                    dataTable.removeColumn(i);\n                    dataTable.addColumn({\n                        label: previousColumnLabel,\n                        id: previousColumnID,\n                        type: previousColumnType\n                    });\n                }\n            }\n            const chart = googleChartWrapper.getChart();\n            if (googleChartWrapper.getChartType() === \"Timeline\") {\n                chart && chart.clearChart();\n            }\n            googleChartWrapper.setChartType(chartType);\n            googleChartWrapper.setOptions(options || {});\n            googleChartWrapper.setDataTable(dataTable);\n            googleChartWrapper.draw();\n            if (this.props.googleChartDashboard !== null) {\n                this.props.googleChartDashboard.draw(dataTable);\n            }\n            if (chartDiff) {\n                googleChartWrapper.setDataTable(chartDiff);\n                googleChartWrapper.draw();\n            }\n            if (formatters) {\n                this.applyFormatters(dataTable, formatters);\n                googleChartWrapper.setDataTable(dataTable);\n                googleChartWrapper.draw();\n            }\n            if (legendToggle === true || legend_toggle === true) {\n                this.grayOutHiddenColumns({\n                    options\n                });\n            }\n            return;\n        };\n        this.grayOutHiddenColumns = (param)=>{\n            let { options  } = param;\n            const { googleChartWrapper  } = this.props;\n            const dataTable = googleChartWrapper.getDataTable();\n            if (!dataTable) return;\n            const columnCount = dataTable.getNumberOfColumns();\n            const hasAHiddenColumn = this.state.hiddenColumns.length > 0;\n            if (hasAHiddenColumn === false) return;\n            const colors = Array.from({\n                length: columnCount - 1\n            }).map((dontcare, i)=>{\n                const columnID = this.getColumnID(dataTable, i + 1);\n                if (this.state.hiddenColumns.includes(columnID)) {\n                    return GRAY_COLOR;\n                } else if (options && options.colors) {\n                    return options.colors[i];\n                } else {\n                    return DEFAULT_CHART_COLORS[i];\n                }\n            });\n            googleChartWrapper.setOptions({\n                ...options,\n                colors\n            });\n            googleChartWrapper.draw();\n        };\n        this.onResize = ()=>{\n            const { googleChartWrapper  } = this.props;\n            googleChartWrapper.draw();\n        };\n    }\n}\nclass GoogleChartDataTable extends React.Component {\n    componentDidMount() {}\n    componentWillUnmount() {}\n    shouldComponentUpdate() {\n        return false;\n    }\n    render() {\n        const { google , googleChartWrapper , googleChartDashboard  } = this.props;\n        return /*#__PURE__*/ React.createElement(ContextConsumer, {\n            render: (props)=>{\n                return /*#__PURE__*/ React.createElement(GoogleChartDataTableInner, Object.assign({}, props, {\n                    google: google,\n                    googleChartWrapper: googleChartWrapper,\n                    googleChartDashboard: googleChartDashboard\n                }));\n            }\n        });\n    }\n}\n\nclass GoogleChartEvents extends React.Component {\n    shouldComponentUpdate() {\n        return false;\n    }\n    listenToEvents(param) {\n        let { chartEvents , google , googleChartWrapper  } = param;\n        if (!chartEvents) {\n            return;\n        }\n        google.visualization.events.removeAllListeners(googleChartWrapper);\n        for (let event of chartEvents){\n            var _this = this;\n            const { eventName , callback  } = event;\n            google.visualization.events.addListener(googleChartWrapper, eventName, function() {\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                callback({\n                    chartWrapper: googleChartWrapper,\n                    props: _this.props,\n                    google: google,\n                    eventArgs: args\n                });\n            });\n        }\n    }\n    componentDidMount() {\n        var ref;\n        const { google , googleChartWrapper  } = this.props;\n        this.listenToEvents({\n            chartEvents: ((ref = this.propsFromContext) === null || ref === void 0 ? void 0 : ref.chartEvents) || null,\n            google,\n            googleChartWrapper\n        });\n    }\n    render() {\n        this.props;\n        return /*#__PURE__*/ React.createElement(ContextConsumer, {\n            render: (propsFromContext)=>{\n                this.propsFromContext = propsFromContext;\n                return null;\n            }\n        });\n    }\n    constructor(props){\n        super(props);\n        this.propsFromContext = null;\n    }\n}\n\nlet controlCounter = 0;\nclass GoogleChart extends React.Component {\n    componentDidMount() {\n        const { options , google , chartType , chartWrapperParams , toolbarItems , getChartEditor , getChartWrapper ,  } = this.props;\n        const chartConfig = {\n            chartType,\n            options,\n            containerId: this.getGraphID(),\n            ...chartWrapperParams\n        };\n        const googleChartWrapper = new google.visualization.ChartWrapper(chartConfig);\n        googleChartWrapper.setOptions(options || {});\n        if (getChartWrapper) {\n            getChartWrapper(googleChartWrapper, google);\n        }\n        const googleChartDashboard = new google.visualization.Dashboard(this.dashboard_ref);\n        const googleChartControls = this.addControls(googleChartWrapper, googleChartDashboard);\n        if (toolbarItems) {\n            google.visualization.drawToolbar(this.toolbar_ref.current, toolbarItems);\n        }\n        let googleChartEditor = null;\n        if (getChartEditor) {\n            googleChartEditor = new google.visualization.ChartEditor();\n            getChartEditor({\n                chartEditor: googleChartEditor,\n                chartWrapper: googleChartWrapper,\n                google\n            });\n        }\n        this.setState({\n            googleChartEditor,\n            googleChartControls: googleChartControls,\n            googleChartDashboard: googleChartDashboard,\n            googleChartWrapper,\n            isReady: true\n        });\n    }\n    componentDidUpdate() {\n        if (!this.state.googleChartWrapper) return;\n        if (!this.state.googleChartDashboard) return;\n        if (!this.state.googleChartControls) return;\n        const { controls  } = this.props;\n        if (controls) {\n            for(let i = 0; i < controls.length; i += 1){\n                const { controlType , options , controlWrapperParams  } = controls[i];\n                if (controlWrapperParams && \"state\" in controlWrapperParams) {\n                    this.state.googleChartControls[i].control.setState(controlWrapperParams[\"state\"]);\n                }\n                this.state.googleChartControls[i].control.setOptions(options);\n                this.state.googleChartControls[i].control.setControlType(controlType);\n            }\n        }\n    }\n    shouldComponentUpdate(nextProps, nextState) {\n        return this.state.isReady !== nextState.isReady || nextProps.controls !== this.props.controls;\n    }\n    render() {\n        const { width , height , options , style  } = this.props;\n        const divStyle = {\n            height: height || options && options.height,\n            width: width || options && options.width,\n            ...style\n        };\n        if (this.props.render) {\n            return /*#__PURE__*/ React.createElement(\"div\", {\n                ref: this.dashboard_ref,\n                style: divStyle\n            }, /*#__PURE__*/ React.createElement(\"div\", {\n                ref: this.toolbar_ref,\n                id: \"toolbar\"\n            }), this.props.render({\n                renderChart: this.renderChart,\n                renderControl: this.renderControl,\n                renderToolbar: this.renderToolBar\n            }));\n        } else {\n            return /*#__PURE__*/ React.createElement(\"div\", {\n                ref: this.dashboard_ref,\n                style: divStyle\n            }, this.renderControl((param)=>{\n                let { controlProp  } = param;\n                return controlProp.controlPosition !== \"bottom\";\n            }), this.renderChart(), this.renderControl((param)=>{\n                let { controlProp  } = param;\n                return controlProp.controlPosition === \"bottom\";\n            }), this.renderToolBar());\n        }\n    }\n    constructor(...args1){\n        var _this1;\n        super(...args1), _this1 = this;\n        this.state = {\n            googleChartWrapper: null,\n            googleChartDashboard: null,\n            googleChartControls: null,\n            googleChartEditor: null,\n            isReady: false\n        };\n        this.graphID = null;\n        this.dashboard_ref = /*#__PURE__*/ React.createRef();\n        this.toolbar_ref = /*#__PURE__*/ React.createRef();\n        this.getGraphID = ()=>{\n            const { graphID , graph_id  } = this.props;\n            let instanceGraphID;\n            if (!graphID && !graph_id) {\n                if (!this.graphID) {\n                    instanceGraphID = generateUniqueID();\n                } else {\n                    instanceGraphID = this.graphID;\n                }\n            } else if (graphID && !graph_id) {\n                instanceGraphID = graphID;\n            } else if (graph_id && !graphID) {\n                instanceGraphID = graph_id;\n            } else {\n                instanceGraphID = graphID;\n            }\n            this.graphID = instanceGraphID;\n            return this.graphID;\n        };\n        this.getControlID = (id, index)=>{\n            controlCounter += 1;\n            let controlID;\n            if (typeof id === \"undefined\") {\n                controlID = \"googlechart-control-\".concat(index, \"-\").concat(controlCounter);\n            } else {\n                controlID = id;\n            }\n            return controlID;\n        };\n        this.addControls = (googleChartWrapper, googleChartDashboard)=>{\n            const { google , controls  } = this.props;\n            const googleChartControls = !controls ? null : controls.map((control, i)=>{\n                const { controlID: controlIDMaybe , controlType , options: controlOptions , controlWrapperParams ,  } = control;\n                const controlID = this.getControlID(controlIDMaybe, i);\n                return {\n                    controlProp: control,\n                    control: new google.visualization.ControlWrapper({\n                        containerId: controlID,\n                        controlType,\n                        options: controlOptions,\n                        ...controlWrapperParams\n                    })\n                };\n            });\n            if (!googleChartControls) {\n                return null;\n            }\n            googleChartDashboard.bind(googleChartControls.map((param)=>{\n                let { control  } = param;\n                return control;\n            }), googleChartWrapper);\n            for (let chartControl of googleChartControls){\n                const { control , controlProp  } = chartControl;\n                const { controlEvents =[]  } = controlProp;\n                for (let event of controlEvents){\n                    var _this = this;\n                    const { callback , eventName  } = event;\n                    google.visualization.events.removeListener(control, eventName, callback);\n                    google.visualization.events.addListener(control, eventName, function() {\n                        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                            args[_key] = arguments[_key];\n                        }\n                        callback({\n                            chartWrapper: googleChartWrapper,\n                            controlWrapper: control,\n                            props: _this.props,\n                            google: google,\n                            eventArgs: args\n                        });\n                    });\n                }\n            }\n            return googleChartControls;\n        };\n        this.renderChart = ()=>{\n            const { width , height , options , style , className , rootProps , google  } = this.props;\n            const divStyle = {\n                height: height || options && options.height,\n                width: width || options && options.width,\n                ...style\n            };\n            return /*#__PURE__*/ React.createElement(\"div\", Object.assign({\n                id: this.getGraphID(),\n                style: divStyle,\n                className: className\n            }, rootProps), this.state.isReady && this.state.googleChartWrapper !== null ? /*#__PURE__*/ React.createElement(React.Fragment, null, /*#__PURE__*/ React.createElement(GoogleChartDataTable, {\n                googleChartWrapper: this.state.googleChartWrapper,\n                google: google,\n                googleChartDashboard: this.state.googleChartDashboard\n            }), /*#__PURE__*/ React.createElement(GoogleChartEvents, {\n                googleChartWrapper: this.state.googleChartWrapper,\n                google: google\n            })) : null);\n        };\n        this.renderControl = function() {\n            let filter = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : (param)=>{\n                return true;\n            };\n            return _this1.state.isReady && _this1.state.googleChartControls !== null ? /*#__PURE__*/ React.createElement(React.Fragment, null, _this1.state.googleChartControls.filter((param)=>{\n                let { controlProp , control  } = param;\n                return filter({\n                    control,\n                    controlProp\n                });\n            }).map((param)=>{\n                let { control , controlProp  } = param;\n                return /*#__PURE__*/ React.createElement(\"div\", {\n                    key: control.getContainerId(),\n                    id: control.getContainerId()\n                });\n            })) : null;\n        };\n        this.renderToolBar = ()=>{\n            if (!this.props.toolbarItems) return null;\n            return /*#__PURE__*/ React.createElement(\"div\", {\n                ref: this.toolbar_ref\n            });\n        };\n    }\n}\n\nclass Chart$1 extends (React.Component) {\n    render() {\n        const { chartLanguage , chartPackages , chartVersion , mapsApiKey , loader , errorElement ,  } = this.props;\n        return /*#__PURE__*/ React.createElement(ContextProvider, {\n            value: this.props\n        }, this.state.loadingStatus === \"ready\" && this.state.google !== null ? /*#__PURE__*/ React.createElement(GoogleChart, Object.assign({}, this.props, {\n            google: this.state.google\n        })) : this.state.loadingStatus === \"errored\" && errorElement ? errorElement : loader, /*#__PURE__*/ React.createElement(LoadGoogleCharts, {\n            chartLanguage: chartLanguage,\n            chartPackages: chartPackages,\n            chartVersion: chartVersion,\n            mapsApiKey: mapsApiKey,\n            onLoad: this.onLoad,\n            onError: this.onError\n        }));\n    }\n    componentDidMount() {\n        this._isMounted = true;\n    }\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n    isFullyLoaded(google) {\n        const { controls , toolbarItems , getChartEditor  } = this.props;\n        return google && google.visualization && google.visualization.ChartWrapper && google.visualization.Dashboard && (!controls || google.visualization.ChartWrapper) && (!getChartEditor || google.visualization.ChartEditor) && (!toolbarItems || google.visualization.drawToolbar);\n    }\n    constructor(...args){\n        super(...args);\n        this._isMounted = false;\n        this.state = {\n            loadingStatus: \"loading\",\n            google: null\n        };\n        this.onLoad = (google1)=>{\n            if (this.props.onLoad) {\n                this.props.onLoad(google1);\n            }\n            if (this.isFullyLoaded(google1)) {\n                this.onSuccess(google1);\n            } else {\n                // IE11: window.google is not fully set, we have to wait\n                const id = setInterval(()=>{\n                    const google = window.google;\n                    if (this._isMounted) {\n                        if (google && this.isFullyLoaded(google)) {\n                            clearInterval(id);\n                            this.onSuccess(google);\n                        }\n                    } else {\n                        clearInterval(id);\n                    }\n                }, 1000);\n            }\n        };\n        this.onSuccess = (google)=>{\n            this.setState({\n                loadingStatus: \"ready\",\n                google\n            });\n        };\n        this.onError = ()=>{\n            this.setState({\n                loadingStatus: \"errored\"\n            });\n        };\n    }\n}\nChart$1.defaultProps = chartDefaultProps;\n\nvar GoogleDataTableColumnRoleType;\n(function(GoogleDataTableColumnRoleType) {\n    GoogleDataTableColumnRoleType[\"annotation\"] = \"annotation\";\n    GoogleDataTableColumnRoleType[\"annotationText\"] = \"annotationText\";\n    GoogleDataTableColumnRoleType[\"certainty\"] = \"certainty\";\n    GoogleDataTableColumnRoleType[\"emphasis\"] = \"emphasis\";\n    GoogleDataTableColumnRoleType[\"interval\"] = \"interval\";\n    GoogleDataTableColumnRoleType[\"scope\"] = \"scope\";\n    GoogleDataTableColumnRoleType[\"style\"] = \"style\";\n    GoogleDataTableColumnRoleType[\"tooltip\"] = \"tooltip\";\n    GoogleDataTableColumnRoleType[\"domain\"] = \"domain\";\n})(GoogleDataTableColumnRoleType || (GoogleDataTableColumnRoleType = {}));\n\nvar Chart = Chart$1;\n\nexport { Chart$1 as Chart, GoogleDataTableColumnRoleType, Chart as default };\n//# sourceMappingURL=index.js.map\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { createRoot } from 'react-dom/client';\nimport { tableToJson } from './utils/results';\nimport PieChart from './charts/PieChart';\nimport MyParkRuns from './components/MyParkRuns';\nimport MyCountries from './components/MyCountries';\nimport Alphabet from './components/Alphabet';\n\n\nlet table = document.querySelector('table#results');\nlet results = tableToJson(table);\n\nfunction AllParkRunStats() {\n  return <>\n    <h2>My Parkrun Stats</h2>\n    <PieChart results={results} />\n    <MyParkRuns results={results} />\n    <MyCountries results={results} />\n    <Alphabet results={results} />\n  </>;\n}\n\nconst domNode = document.getElementById('weberino-parkrun');\nconst root = createRoot(domNode);\nroot.render(<AllParkRunStats/>);\n"],"names":["Chart","getUniqueEventsAndCount","PieChart","results","uniqueEventsAndCount","options","title","sliceVisibilityThreshold","data","event","push","createElement","chartType","width","height","parkrunWithThisLetter","Alphabet","alphabet","Array","from","length","_","i","String","fromCharCode","Fragment","map","letter","key","className","getUniqueCountryEventsAndCount","getCountryName","MyCountries","uniqueEvents","Object","keys","class","MyParkRuns","url","countries","console","log","events","filter","startsWith","join","tableToJson","table","rows","propCells","cells","propNames","obj","row","countryUrl","iLen","textContent","innerText","j","jLen","k","innerHTML","includes","extractCountryUrl","forEach","result","Event","Country","htmlCode","tempElement","document","querySelector","href","hostname","URL","createRoot","AllParkRunStats","domNode","getElementById","root","render"],"sourceRoot":""}